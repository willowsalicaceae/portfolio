<file path="src\App.js">
import React, { useRef } from 'react';
import { CssVarsProvider, CssBaseline, Box, Container } from '@mui/joy';
import Header from './components/Header';
import Home from './pages/Home';
import Work from './pages/Work';
import Contact from './pages/Contact';
import theme from './theme';

const App = () => {
  const homeRef = useRef(null);
  const workRef = useRef(null);
  const contactRef = useRef(null);

  const [selectedTag, setSelectedTag] = React.useState('');

  const scrollTo = (ref) => {
    ref.current.scrollIntoView({ behavior: 'smooth' });
  };

  const handleCategoryClick = (category) => {
    setSelectedTag(category);
    scrollTo(workRef);
  };

  return (
    <CssVarsProvider theme={theme} defaultMode="system">
      <CssBaseline />
      <Box
        sx={{
          minHeight: '100vh',
          bgcolor: 'background.body',
          display: 'flex',
          flexDirection: 'column',
        }}
      >
        <Header scrollTo={scrollTo} homeRef={homeRef} workRef={workRef} contactRef={contactRef} />
        <Box component="main" sx={{ flexGrow: 1 }}>
          <Box id="home" ref={homeRef} sx={{ 
            minHeight: '75vh', // Match this with the Home component
            display: 'flex', 
            alignItems: 'center' 
          }}>
            <Container maxWidth="lg">
              <Home onCategoryClick={handleCategoryClick} />
            </Container>
          </Box>
          <Box id="work" ref={workRef}>
            <Container maxWidth="lg">
              <Work initialSelectedTag={selectedTag} />
            </Container>
          </Box>
          <Box id="contact" ref={contactRef}>
            <Container maxWidth="lg">
              <Contact />
            </Container>
          </Box>
        </Box>
      </Box>
    </CssVarsProvider>
  );
};

export default App;
</file>

<file path="src\App.test.js">
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

</file>

<file path="src\index.js">
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

</file>

<file path="src\reportWebVitals.js">
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

</file>

<file path="src\setupTests.js">
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

</file>

<file path="src\theme.js">

import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  "colorSchemes": {
    "light": {
      "palette": {
        "primary": {
          "50": "#ecfdf5",
          "100": "#d1fae5",
          "200": "#a7f3d0",
          "300": "#6ee7b7",
          "400": "#34d399",
          "500": "#10b981",
          "600": "#059669",
          "700": "#047857",
          "800": "#065f46",
          "900": "#064e3b"
        },
        "danger": {
          "50": "#fff1f2",
          "100": "#ffe4e6",
          "200": "#fecdd3",
          "300": "#fda4af",
          "400": "#fb7185",
          "500": "#f43f5e",
          "600": "#e11d48",
          "700": "#be123c",
          "800": "#9f1239",
          "900": "#881337"
        },
        "success": {
          "50": "#f7fee7",
          "100": "#ecfccb",
          "200": "#d9f99d",
          "300": "#bef264",
          "400": "#a3e635",
          "500": "#84cc16",
          "600": "#65a30d",
          "700": "#4d7c0f",
          "800": "#3f6212",
          "900": "#365314"
        },
        "warning": {
          "50": "#fffbeb",
          "100": "#fef3c7",
          "200": "#fde68a",
          "300": "#fcd34d",
          "400": "#fbbf24",
          "500": "#f59e0b",
          "600": "#d97706",
          "700": "#b45309",
          "800": "#92400e",
          "900": "#78350f"
        }
      }
    },
    "dark": {
      "palette": {
        "primary": {
          "50": "#ecfdf5",
          "100": "#d1fae5",
          "200": "#a7f3d0",
          "300": "#6ee7b7",
          "400": "#34d399",
          "500": "#10b981",
          "600": "#059669",
          "700": "#047857",
          "800": "#065f46",
          "900": "#064e3b"
        },
        "danger": {
          "50": "#fff1f2",
          "100": "#ffe4e6",
          "200": "#fecdd3",
          "300": "#fda4af",
          "400": "#fb7185",
          "500": "#f43f5e",
          "600": "#e11d48",
          "700": "#be123c",
          "800": "#9f1239",
          "900": "#881337"
        },
        "success": {
          "50": "#f7fee7",
          "100": "#ecfccb",
          "200": "#d9f99d",
          "300": "#bef264",
          "400": "#a3e635",
          "500": "#84cc16",
          "600": "#65a30d",
          "700": "#4d7c0f",
          "800": "#3f6212",
          "900": "#365314"
        },
        "warning": {
          "50": "#fffbeb",
          "100": "#fef3c7",
          "200": "#fde68a",
          "300": "#fcd34d",
          "400": "#fbbf24",
          "500": "#f59e0b",
          "600": "#d97706",
          "700": "#b45309",
          "800": "#92400e",
          "900": "#78350f"
        }
      }
    }
  }
})

export default theme;
</file>

<file path="src\components\Header.js">
import * as React from 'react';
import { useColorScheme } from '@mui/joy/styles';
import Box from '@mui/joy/Box';
import IconButton from '@mui/joy/IconButton';
import Button from '@mui/joy/Button';
import Tooltip from '@mui/joy/Tooltip';

import DarkModeRoundedIcon from '@mui/icons-material/DarkModeRounded';
import LightModeRoundedIcon from '@mui/icons-material/LightModeRounded';
import LinkedInIcon from '@mui/icons-material/LinkedIn';
import GitHubIcon from '@mui/icons-material/GitHub';

function ColorSchemeToggle() {
  const { mode, setMode } = useColorScheme();
  const [mounted, setMounted] = React.useState(false);
  React.useEffect(() => {
    setMounted(true);
  }, []);
  if (!mounted) {
    return <IconButton size="sm" variant="outlined" color="primary" />;
  }
  return (
    <Tooltip title="Change theme" variant="outlined">
      <IconButton
        id="toggle-mode"
        size="sm"
        variant="plain"
        color="neutral"
        sx={{ alignSelf: 'center' }}
        onClick={() => {
          setMode(mode === 'light' ? 'dark' : 'light');
        }}
      >
        {mode === 'light' ? <DarkModeRoundedIcon /> : <LightModeRoundedIcon />}
      </IconButton>
    </Tooltip>
  );
}

export default function Header({ scrollTo, homeRef, workRef, contactRef }) {
  return (
    <Box
      sx={{
        p: 2,
        gap: 2,
        bgcolor: 'background.surface',
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        gridColumn: '1 / -1',
        borderBottom: '1px solid',
        borderColor: 'divider',
        position: 'sticky',
        top: 0,
        zIndex: 1100,
      }}
    >
      <Box sx={{ display: 'flex', flexGrow: 1, justifyContent: 'space-between' }}>
        <Box sx={{ display: 'flex', flexDirection: 'row', gap: 1.5, alignItems: 'center' }}>
          <Button
            variant="plain"
            color="neutral"
            onClick={() => scrollTo(homeRef)}
            size="sm"
          >
            Home
          </Button>
          <Button
            variant="plain"
            color="neutral"
            onClick={() => scrollTo(workRef)}
            size="sm"
          >
            Work
          </Button>
          <Button
            variant="plain"
            color="neutral"
            onClick={() => scrollTo(contactRef)}
            size="sm"
          >
            Contact
          </Button>
        </Box>
        <Box sx={{ display: 'flex', flexDirection: 'row', gap: 1.5, alignItems: 'center' }}>
          <Tooltip title="LinkedIn" variant="outlined">
            <IconButton
              size="sm"
              variant="plain"
              color="neutral"
              component="a"
              href="https://www.linkedin.com/in/willowfrazey"
              target="_blank"
              rel="noopener noreferrer"
            >
              <LinkedInIcon />
            </IconButton>
          </Tooltip>
          <Tooltip title="GitHub" variant="outlined">
            <IconButton
              size="sm"
              variant="plain"
              color="neutral"
              component="a"
              href="https://github.com/willowsalicaceae"
              target="_blank"
              rel="noopener noreferrer"
            >
              <GitHubIcon />
            </IconButton>
          </Tooltip>
          <ColorSchemeToggle />
        </Box>
      </Box>
    </Box>
  );
}
</file>

<file path="src\components\TypewriterEffect.js">
import React, { useState, useEffect } from 'react';
import { Typography, Stack } from '@mui/joy';

const TypewriterEffect = ({ lines, onComplete }) => {
  const [displayedLines, setDisplayedLines] = useState(lines.map(() => ''));
  const [currentLineIndex, setCurrentLineIndex] = useState(0);
  const [currentCharIndex, setCurrentCharIndex] = useState(0);
  const [isPaused, setIsPaused] = useState(false);

  useEffect(() => {
    if (currentLineIndex >= lines.length) {
      onComplete && onComplete();
      return;
    }

    const timer = setTimeout(() => {
      if (isPaused) {
        setIsPaused(false);
        setCurrentLineIndex(prev => prev + 1);
        setCurrentCharIndex(0);
      } else if (currentCharIndex < lines[currentLineIndex].length) {
        setDisplayedLines(prev => 
          prev.map((line, index) => 
            index === currentLineIndex 
              ? lines[currentLineIndex].slice(0, currentCharIndex + 1) 
              : line
          )
        );
        setCurrentCharIndex(prev => prev + 1);
      } else {
        setIsPaused(true);
      }
    }, isPaused ? 250 : 50);

    return () => clearTimeout(timer);
  }, [currentLineIndex, currentCharIndex, isPaused, lines, onComplete]);

  return (
    <Stack spacing={2}>
      {displayedLines.map((line, index) => (
        <Typography 
          key={index}
          level={index === 0 ? "h1" : index === 1 ? "h2" : "h3"}
          sx={{
            fontSize: '4rem',
            fontWeight: 'bold',
          }}
        >
          {line}
        </Typography>
      ))}
    </Stack>
  );
};

export default TypewriterEffect;
</file>

<file path="src\components\WorkControls.js">
import React from 'react';
import { Box, Select, Option, Chip, Radio, RadioGroup, FormControl, FormLabel, Checkbox } from '@mui/joy';
import CheckIcon from '@mui/icons-material/Check';

const WorkControls = ({ sortBy, onSortChange, tags, selectedTag, onTagChange, animatedThumbnails, onAnimatedThumbnailsChange }) => {
  return (
    <Box sx={{ display: 'flex', gap: 4, alignItems: 'flex-end', mb: 2 }}>
      <FormControl>
        <FormLabel>Sort by</FormLabel>
        <Select value={sortBy} onChange={(e, newValue) => onSortChange(newValue)}>
          <Option value="relevancy">Relevancy</Option>
          <Option value="date">Date</Option>
        </Select>
      </FormControl>
      <FormControl>
        <FormLabel>Filter by tag</FormLabel>
        <RadioGroup
          name="filter-tags"
          value={selectedTag}
          onChange={(event) => onTagChange(event.target.value)}
          sx={{
            display: 'flex',
            flexDirection: 'row',
            flexWrap: 'wrap',
            gap: 1,
            margin: 0,
            pb: "1px",
          }}
        >
          <Chip
            variant="plain"
            color={selectedTag === '' ? 'primary' : 'neutral'}
            startDecorator={
              selectedTag === '' && <CheckIcon sx={{ zIndex: 1, pointerEvents: 'none' }} />
            }
            sx={{
              "--Chip-minHeight": "34px",
            }}
          >
            <Radio
              variant="outlined"
              color={selectedTag === '' ? 'primary' : 'neutral'}
              disableIcon
              overlay
              label="All"
              value=""
            />
          </Chip>
          {tags.map((tag) => {
            const checked = selectedTag === tag;
            return (
              <Chip
                key={tag}
                variant="plain"
                color={checked ? 'primary' : 'neutral'}
                startDecorator={
                  checked && <CheckIcon sx={{ zIndex: 1, pointerEvents: 'none' }} />
                }
                sx={{
                  "--Chip-minHeight": "34px"
                }}
              >
                <Radio
                  variant="outlined"
                  color={checked ? 'primary' : 'neutral'}
                  disableIcon
                  overlay
                  label={tag}
                  value={tag}
                />
              </Chip>
            );
          })}
        </RadioGroup>
      </FormControl>
      <FormControl>
        <Checkbox
          checked={animatedThumbnails}
          onChange={onAnimatedThumbnailsChange}
          label="Animated Thumbnails"
        />
      </FormControl>
    </Box>
  );
};

export default WorkControls;
</file>

<file path="src\components\WorkForm.js">
import { useState } from 'react';
import { Box, Button, Textarea, Typography } from '@mui/joy';

const WorkForm = ({ onSubmit }) => {
  const [portfolioData, setPortfolioData] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
  
    const workPattern = /(.+)\n(.+) - (.+)\n(.+)\n(.+)\n(.+)\n(.+)?\n(.+)?\n(.+)?\n(.+)?/g;
    const itemPattern = /([^,]+)/g;
    const linkPattern = /([^:]+):\s*([^,\n]+)(?:,\s*)?/g;
  
    const works = [];
  
    let match;
    while ((match = workPattern.exec(portfolioData)) !== null) {
      const [, id, subtitle, title, date, linksString, description, tagsString = '', softwareString = '', relevancyString = '', hasVideoString = ''] = match;
  
      const tags = (tagsString.match(itemPattern) || []).map((tag) => tag.trim());
      const software = (softwareString.match(itemPattern) || []).map((sw) => sw.trim());
      const relevancy = parseInt(relevancyString.trim()) || 0;
      const hasVideo = hasVideoString.trim().toLowerCase() === 'true';
  
      const links = [];
      let linkMatch;
      while ((linkMatch = linkPattern.exec(linksString)) !== null) {
        const [, name, url] = linkMatch;
        links.push({ name: name.trim(), url: url.trim() });
      }

      const work = {
        id: id.trim(),
        subtitle: subtitle.trim(),
        title: title.trim(),
        date: date.trim(),
        links,
        description: description.trim(),
        tags,
        software,
        relevancy,
        hasVideo,
      };

      works.push(work);
    }

    onSubmit(works);

    // Download the JSON file
    const jsonString = JSON.stringify(works, null, 2);
    const blob = new Blob([jsonString], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'portfolioData.json';
    link.click();
    URL.revokeObjectURL(url);

    setPortfolioData('');
  };

  return (
    <Box component="form" onSubmit={handleSubmit}>
      <Typography level="h2">Add Portfolio Data</Typography>
      <Textarea
        value={portfolioData}
        onChange={(e) => setPortfolioData(e.target.value)}
        minRows={10}
        placeholder={`id
          subtitle - title
          date
          Link1Name: Link1URL, Link2Name: Link2URL
          description
          tag1, tag2, tag3
          software1, software2
          relevancy
          hasVideo`}
      />
      <Button type="submit">Submit</Button>
    </Box>
  );
};

export default WorkForm;
</file>

<file path="src\components\WorkList.js">
import React, { useState } from 'react';
import { Box, Grid, Card, CardCover, CardContent, Typography, Stack, Skeleton, Tooltip } from '@mui/joy';

const WorkCard = ({ work, animatedThumbnails, onWorkClick }) => {
  const [isLoading, setIsLoading] = useState(true);

  const handleMediaLoaded = () => {
    setIsLoading(false);
  };

  return (
    <Card
      onClick={() => onWorkClick(work)}
      sx={{
        cursor: 'pointer',
        position: 'relative',
        overflow: 'hidden',
        paddingTop: '50%',
        '&:hover .overlay': {
          opacity: 1,
        },
        '&:hover .card-content': {
          opacity: 1,
        },
      }}
    >
      <CardCover
        sx={{
          position: 'absolute',
          top: 0,
          left: 0,
          width: '100%',
          height: '100%',
        }}
      >
        {isLoading && (
          <Skeleton
            animation="wave"
            variant="rectangular"
            width="100%"
            height="100%"
          />
        )}
        {animatedThumbnails && work.hasVideo ? (
          <video
            src={`/videos/${work.id}.mp4`}
            loop
            muted
            autoPlay
            playsInline
            style={{
              objectFit: 'cover',
              width: '100%',
              height: '100%',
              display: isLoading ? 'none' : 'block',
            }}
            onLoadedData={handleMediaLoaded}
          />
        ) : (
          <img
            src={`/images/thumbnails/${work.id}.jpg`}
            srcSet={`/images/thumbnails/${work.id}.jpg 2x`}
            loading="lazy"
            alt={work.title}
            style={{
              objectFit: 'cover',
              width: '100%',
              height: '100%',
              display: isLoading ? 'none' : 'block',
            }}
            onLoad={handleMediaLoaded}
          />
        )}
        <Box
          className="overlay"
          sx={{
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.8))',
            opacity: 0,
            transition: 'opacity 0.3s',
          }}
        />
      </CardCover>
      <CardContent
        className="card-content"
        sx={{
          position: 'absolute',
          bottom: 0,
          left: 0,
          width: '100%',
          opacity: 0,
          transition: 'opacity 0.3s',
          color: '#fff',
          padding: 2,
          '& .MuiTypography-root': {
            color: '#fff',
          },
        }}
      >
        <Typography level="h3">{work.title}</Typography>
        <Typography level="body2">{work.subtitle}</Typography>
        <Stack direction="row" spacing={1} mt={1}>
          {work.software.map((sw) => (
            <Tooltip key={sw} title={sw} variant="outlined">
              <img
                src={`/icons/${sw}.svg`}
                alt={sw}
                style={{ width: '24px', height: '24px' }}
              />
            </Tooltip>
          ))}
        </Stack>
      </CardContent>
    </Card>
  );
};

const WorkList = ({ works, animatedThumbnails, onWorkClick }) => {
  return (
    <Box>
      <Grid container spacing={2}>
        {works.map((work) => (
          <Grid key={work.id} xs={12} sm={6} md={4}>
            <WorkCard work={work} animatedThumbnails={animatedThumbnails} onWorkClick={onWorkClick} />
          </Grid>
        ))}
      </Grid>
    </Box>
  );
};

export default WorkList;
</file>

<file path="src\components\WorkPreview.js">
import React from 'react';
import { Box, Card, CardCover, Typography } from '@mui/joy';
import portfolioData from '../data/portfolioData';

const WorkPreview = ({ workIds }) => {
  const gap = 16;

  return (
    <Box
      sx={{
        display: 'grid',
        gridTemplateColumns: 'repeat(2, 1fr)',
        gap: `${gap}px`,
        width: '100%',
        maxWidth: '600px',
      }}
    >
      {workIds.map((workId, index) => {
        const work = portfolioData.find(w => w.id === workId.id);
        if (!work) return null;
       
        return (
          <Box
            key={work.id}
            sx={{
              gridColumn: workId.size === 2 ? 'span 2' : 'span 1',
              aspectRatio: '1 / 1',
              opacity: 0,
              animation: 'fadeIn 0.5s forwards',
              animationDelay: `${index * 0.1}s`,
              '@keyframes fadeIn': {
                '0%': { opacity: 0 },
                '100%': { opacity: 1 },
              },
            }}
          >
            <Card
              sx={{
                width: '100%',
                height: '100%',
                textDecoration: 'none',
              }}
            >
              <CardCover>
                <img
                  src={`/images/thumbnails/${work.id}.jpg`}
                  alt={work.title}
                  style={{ objectFit: 'cover', width: '100%', height: '100%' }}
                />
              </CardCover>
              <CardCover
                sx={{
                  background:
                    'linear-gradient(to top, rgba(0,0,0,0.4), rgba(0,0,0,0) 200px), linear-gradient(to top, rgba(0,0,0,0.8), rgba(0,0,0,0) 300px)',
                  opacity: 0,
                  transition: 'opacity 0.3s',
                  '&:hover': {
                    opacity: 1,
                  },
                }}
              >
                <Typography
                  level="title-lg"
                  sx={{
                    color: 'white',
                    position: 'absolute',
                    bottom: 16,
                    left: 16,
                  }}
                >
                  {work.title}
                </Typography>
              </CardCover>
            </Card>
          </Box>
        );
      })}
    </Box>
  );
};

export default WorkPreview;
</file>

<file path="src\data\portfolioData.js">
const portfolioData = [
  {
    "id": "cornerofmyeyeradioedit",
    "subtitle": "Dizzy Spins & Landon Sears",
    "title": "Corner of My Eye (Radio Edit)",
    "date": "Apr 10, 2024",
    "links": [
      {
        "name": "Visualizer",
        "url": "https://www.youtube.com/watch?v=bWBdWwz6k2s"
      }
    ],
    "description": "Created visualizer",
    "tags": [
      "Video Editing",
      "Visualizer",
      "Music"
    ],
    "software": [
      "After Effects",
      "Photoshop"
    ],
    "relevancy": 6,
    "hasVideo": true
  },
  {
    "id": "onenightout",
    "subtitle": "Dizzy Spins",
    "title": "One Night Out",
    "date": "Feb 10, 2024",
    "links": [
      {
        "name": "Visualizer",
        "url": "https://www.youtube.com/watch?v=OxVBComxisI"
      }
    ],
    "description": "Created visualizer",
    "tags": [
      "Video Editing",
      "Visualizer",
      "Music"
    ],
    "software": [
      "After Effects",
      "Photoshop"
    ],
    "relevancy": 8,
    "hasVideo": true
  },
  {
    "id": "falsepermanence",
    "subtitle": "Dizzy Spins",
    "title": "False Permanence",
    "date": "Feb 6, 2024",
    "links": [
      {
        "name": "Visualizer",
        "url": "https://www.youtube.com/watch?v=-elwaC0Cciw"
      }
    ],
    "description": "Created visualizer",
    "tags": [
      "Video Editing",
      "Visualizer",
      "Music"
    ],
    "software": [
      "After Effects",
      "Photoshop"
    ],
    "relevancy": 5,
    "hasVideo": true
  },
  {
    "id": "chatbotcemetery",
    "subtitle": "UW INFO 350",
    "title": "Chatbot Cemetery",
    "date": "Mar 9, 2023",
    "links": [
      {
        "name": "Live Site",
        "url": "https://chatbotcemetery.com/"
      },
      {
        "name": "GitHub",
        "url": "https://github.com/willowsalicaceae/chatbot-cemetery"
      }
    ],
    "description": "Created website",
    "tags": [
      "Web Development",
      "School Project"
    ],
    "software": [
      "React"
    ],
    "relevancy": 5,
    "hasVideo": false
  },
  {
    "id": "weatherheatmap",
    "subtitle": "UW INFO 474",
    "title": "Weather Heatmap",
    "date": "Jun 7, 2023",
    "links": [
      {
        "name": "Live Site",
        "url": "https://willowsalicaceae.github.io/weather-heatmap/"
      },
      {
        "name": "GitHub",
        "url": "https://github.com/willowsalicaceae/weather-heatmap"
      }
    ],
    "description": "Created website",
    "tags": [
      "Web Development",
      "School Project"
    ],
    "software": [
      "D3"
    ],
    "relevancy": 6,
    "hasVideo": false
  },
  {
    "id": "covid67",
    "subtitle": "UW iSchool Capstone",
    "title": "Virufy Cough Annotator",
    "date": "May 15, 2023",
    "links": [
      {
        "name": "Presentation Video",
        "url": "https://www.youtube.com/watch?v=rmS8tXf0Z8M"
      },
      {
        "name": "Live Site",
        "url": "https://willowsalicaceae.github.io/virufyCapstone/"
      },
      {
        "name": "GitHub",
        "url": "https://willowsalicaceae.github.io/virufyCapstone/"
      }
    ],
    "description": "Designed website, created demonstration video",
    "tags": [
      "Web Development",
      "School Project"
    ],
    "software": [
      "React",
      "Node.js"
    ],
    "relevancy": 6,
    "hasVideo": false
  },
  {
    "id": "walkseattle",
    "subtitle": "UW INFO 442",
    "title": "WalkSeattle",
    "date": "Jun 4, 2024",
    "links": [
      {
        "name": "Live Site",
        "url": "https://walkseattle.vercel.app/"
      },
      {
        "name": "GitHub",
        "url": "https://github.com/willowsalicaceae/walk-seattle"
      }
    ],
    "description": "Developed website",
    "tags": [
      "Web Development",
      "School Project"
    ],
    "software": [
      "React",
      "Node.js"
    ],
    "relevancy": 9,
    "hasVideo": false
  },
  {
    "id": "realtalkepisode32",
    "subtitle": "Real Talk. with John Rudnicki",
    "title": "Dealing With Injury and UW Soccer with Levi Hawk",
    "date": "Sep 15, 2023",
    "links": [
      {
        "name": "Podcast Video",
        "url": "https://www.youtube.com/watch?v=gYZnqejfgwg"
      }
    ],
    "description": "Videography, audio post-production",
    "tags": [
      "Video Editing",
      "Audio"
    ],
    "software": [
      "Premiere Pro"
    ],
    "relevancy": 5,
    "hasVideo": false
  },
  {
    "id": "cornerofmyeye",
    "subtitle": "Dizzy Spins & Landon Sears",
    "title": "Corner of My Eye",
    "date": "May 26, 2022",
    "links": [
      {
        "name": "Visualizer",
        "url": "https://www.youtube.com/watch?v=JvJnYMCz4-I"
      }
    ],
    "description": "Created visualizer",
    "tags": [
      "Video Editing",
      "Visualizer",
      "Music"
    ],
    "software": [
      "After Effects",
      "Photoshop"
    ],
    "relevancy": 8,
    "hasVideo": true
  },
  {
    "id": "underrocksfreestyle",
    "subtitle": "Dizzy Spins",
    "title": "Under Rocks Freestyle (Official Lyric Video)",
    "date": "Dec 16, 2023",
    "links": [
      {
        "name": "Visualizer",
        "url": "https://www.youtube.com/watch?v=P-Rf6GNCvF0"
      }
    ],
    "description": "Created visualizer",
    "tags": [
      "Video Editing",
      "Visualizer",
      "Music"
    ],
    "software": [
      "After Effects"
    ],
    "relevancy": 5,
    "hasVideo": false
  },
  {
    "id": "borderline",
    "subtitle": "Dizzy Spins & Evan Braddock",
    "title": "Borderline",
    "date": "Jun 17, 2022",
    "links": [
      {
        "name": "Visualizer",
        "url": "https://www.youtube.com/watch?v=ZyElRGfkJEU"
      }
    ],
    "description": "Created visualizer",
    "tags": [
      "Video Editing",
      "Visualizer",
      "Music"
    ],
    "software": [
      "After Effects"
    ],
    "relevancy": 5,
    "hasVideo": false
  },
  {
    "id": "tripwire",
    "subtitle": "Dizzy Spins",
    "title": "Tripwire",
    "date": "Jun 24, 2021",
    "links": [
      {
        "name": "Visualizer",
        "url": "https://www.youtube.com/watch?v=2LeTtfM625g"
      }
    ],
    "description": "Created visualizer",
    "tags": [
      "Video Editing",
      "Visualizer",
      "Music"
    ],
    "software": [
      "After Effects"
    ],
    "relevancy": 4,
    "hasVideo": false
  }
];

export default portfolioData;
</file>

<file path="src\pages\About.js">
import React, { useState, useEffect } from 'react';
import { Box, Typography, Grid, Container } from '@mui/joy';
import TypewriterEffect from '../components/TypewriterEffect';
import WorkPreview from '../components/WorkPreview';

const About = () => {
  const [selectedCategory, setSelectedCategory] = useState('Video Editing');
  const [typingComplete, setTypingComplete] = useState(false);
  const [showCategories, setShowCategories] = useState(false);
  const [showWorks, setShowWorks] = useState(false);
  const categories = ['Video Editing', 'Web Development'];

  const lines = [
    "Hi!",
    "I'm Willow Frazey.",
    "I do..."
  ];

  const workPreviews = {
    'Video Editing': [
      { id: 'cornerofmyeyeradioedit', size: 2 },
      { id: 'onenightout', size: 1 },
      { id: 'falsepermanence', size: 1 },
      { id: 'realtalkepisode32', size: 2 },
      { id: 'cornerofmyeye', size: 2 },
    ],
    'Web Development': [
      { id: 'chatbotcemetery', size: 2 },
      { id: 'weatherheatmap', size: 1 },
      { id: 'covid67', size: 1 },
      { id: 'walkseattle', size: 2 },
    ],
  };

  useEffect(() => {
    if (typingComplete) {
      setShowCategories(true);
      setTimeout(() => setShowWorks(true), 1000); // Delay showing works
    }
  }, [typingComplete]);

  const handleCategoryChange = (category) => {
    setShowWorks(false);
    setTimeout(() => {
      setSelectedCategory(category);
      setShowWorks(true);
    }, 300);
  };

  return (
    <Container maxWidth={false} disableGutters sx={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>
      <Grid container sx={{ flexGrow: 1 }}>
        <Grid xs={12} md={6} sx={{ display: 'flex', alignItems: 'center', p: 4 }}>
          <Box>
            <TypewriterEffect 
              lines={lines} 
              onComplete={() => setTypingComplete(true)} 
            />
            <Box sx={{ mt: 4 }}>
              {categories.map((category, index) => (
                <Typography
                  key={category}
                  level="h1"
                  component="div"
                  onClick={() => handleCategoryChange(category)}
                  sx={{
                    display: 'block',
                    color: 'text.primary',
                    textDecoration: 'none',
                    mt: 2,
                    fontSize: { xs: '2.5rem', md: '3.5rem' },
                    fontWeight: 'bold',
                    opacity: showCategories ? 1 : 0,
                    transition: 'opacity 0.5s, color 0.3s, text-decoration-color 0.3s',
                    transitionDelay: `${index * 0.2}s`,
                    '&:hover': { 
                      color: 'primary.main',
                      textDecorationColor: 'rgba(var(--joy-palette-primary-mainChannel) / 1)',
                      cursor: 'pointer',
                    },
                    textDecorationLine: 'underline',
                    textDecorationColor: selectedCategory === category 
                      ? 'rgba(var(--joy-palette-primary-mainChannel) / 0.5)'
                      : 'transparent',
                    textUnderlineOffset: '0.1em',
                  }}
                >
                  {category}
                </Typography>
              ))}
            </Box>
          </Box>
        </Grid>
        <Grid xs={12} md={6} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', p: 4 }}>
          {showWorks && <WorkPreview workIds={workPreviews[selectedCategory]} />}
        </Grid>
      </Grid>
    </Container>
  );
};

export default About;
</file>

<file path="src\pages\Contact.js">
import React from 'react';
import { Box, Typography } from '@mui/joy';

const Contact = () => {
  return (
    <Box>
      <Typography level="h1">Contact Me</Typography>
      <Typography>
        Coming soon!
      </Typography>
    </Box>
  );
};

export default Contact;
</file>

<file path="src\pages\Home.js">
import React from 'react';
import { Box, Typography, Link } from '@mui/joy';

const Home = ({ onCategoryClick }) => {
  return (
    <Box sx={{ 
      py: 4,
      minHeight: '75vh',
      display: 'flex', 
      flexDirection: 'column', 
      justifyContent: 'center'
    }}>
      <Box>
        <Typography level="h1" sx={{ 
          mb: 1,
          fontSize: { xs: '2.5rem', md: '3.5rem' }
        }}>
          Hi, I'm Willow Frazey
        </Typography>
        <Typography level="h2" sx={{ 
          fontSize: { xs: '1.25rem', md: '1.75rem' }
        }}>
          I specialize in{' '}
          <Link 
            component="button"
            onClick={() => onCategoryClick('Video Editing')}
            sx={{ cursor: 'pointer' }}
          >
            Video Editing
          </Link>
          {' '}and{' '}
          <Link 
            component="button"
            onClick={() => onCategoryClick('Web Development')}
            sx={{ cursor: 'pointer' }}
          >
            Web Development
          </Link>
        </Typography>
      </Box>
    </Box>
  );
};

export default Home;
</file>

<file path="src\pages\Work.js">
import { useState, useEffect } from 'react';
import { Box, Typography, Modal, ModalDialog } from '@mui/joy';
import WorkList from '../components/WorkList';
import WorkControls from '../components/WorkControls';
import WorkDetails from './WorkDetails';
import portfolioData from '../data/portfolioData';

const Work = ({ initialSelectedTag }) => {
  const [works, setWorks] = useState([]);
  const [sortBy, setSortBy] = useState('relevancy');
  const [selectedTag, setSelectedTag] = useState(initialSelectedTag || '');
  const [animatedThumbnails, setAnimatedThumbnails] = useState(true);
  const [selectedWork, setSelectedWork] = useState(null);

  useEffect(() => {
    setWorks(portfolioData);
    const savedAnimatedThumbnails = localStorage.getItem('animatedThumbnails');
    if (savedAnimatedThumbnails !== null) {
      setAnimatedThumbnails(JSON.parse(savedAnimatedThumbnails));
    }
  }, []);

  useEffect(() => {
    setSelectedTag(initialSelectedTag);
  }, [initialSelectedTag]);

  const handleSortChange = (newSortBy) => {
    setSortBy(newSortBy);
  };

  const handleTagChange = (tag) => {
    setSelectedTag(tag);
  };

  const handleAnimatedThumbnailsChange = (event) => {
    const newValue = event.target.checked;
    setAnimatedThumbnails(newValue);
    localStorage.setItem('animatedThumbnails', JSON.stringify(newValue));
  };

  const handleWorkClick = (work) => {
    setSelectedWork(work);
  };

  const handleCloseModal = () => {
    setSelectedWork(null);
  };

  const sortedAndFilteredWorks = works
    .filter((work) => selectedTag === '' || work.tags.includes(selectedTag))
    .sort((a, b) => {
      if (sortBy === 'relevancy') {
        return b.relevancy - a.relevancy;
      } else if (sortBy === 'date') {
        return new Date(b.date) - new Date(a.date);
      }
      return 0;
    });

  const allTags = [...new Set(works.flatMap((work) => work.tags))];

  return (
    <Box sx={{ py: 8 }}>
      <Typography level="h1" sx={{ mb: 4 }}>My Work</Typography>
      <WorkControls
        sortBy={sortBy}
        onSortChange={handleSortChange}
        tags={allTags}
        selectedTag={selectedTag}
        onTagChange={handleTagChange}
        animatedThumbnails={animatedThumbnails}
        onAnimatedThumbnailsChange={handleAnimatedThumbnailsChange}
      />
      <WorkList 
        works={sortedAndFilteredWorks} 
        animatedThumbnails={animatedThumbnails} 
        onWorkClick={handleWorkClick}
      />
      <Modal open={!!selectedWork} onClose={handleCloseModal}>
        <ModalDialog sx={{ maxWidth: 800, width: '100%' }}>
          {selectedWork && <WorkDetails work={selectedWork} />}
        </ModalDialog>
      </Modal>
    </Box>
  );
};

export default Work;
</file>

<file path="src\pages\WorkDetails.js">
import React from 'react';
import { Box, Typography, CardContent, CardActions, Chip, Link, Stack, AspectRatio, Button } from '@mui/joy';
import OpenInNew from '@mui/icons-material/OpenInNew';

const WorkDetails = ({ work }) => {
  if (!work) {
    return <Typography>Work not found</Typography>;
  }

  const mainLink = work.links[0];
  const isYouTubeVideo = mainLink.url.includes('youtube.com') || mainLink.url.includes('youtu.be');
  const videoId = isYouTubeVideo ? mainLink.url.split(/v\/|v=|youtu\.be\//)[1].split(/[?&]/)[0] : null;

  return (
    <Box>
      <AspectRatio ratio="16/9" sx={{
        borderRadius: 'sm',
        overflow: 'hidden',
        '& iframe': {
          border: 'none',
        }
      }}>
        {isYouTubeVideo ? (
          <iframe
            src={`https://www.youtube-nocookie.com/embed/${videoId}?modestbranding=1&rel=0`}
            title={work.title}
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
          />
        ) : (
          <Link
            href={mainLink.url}
            target="_blank"
            rel="noopener noreferrer"
            overlay
          >
            <img
              src={`/images/thumbnails/${work.id}.jpg`}
              srcSet={`/images/thumbnails/${work.id}.jpg 2x`}
              loading="lazy"
              alt={work.title}
              style={{ objectFit: 'cover', width: '100%', height: '100%' }}
            />
          </Link>
        )}
      </AspectRatio>

      <CardActions sx={{ 
        display: 'flex', 
        justifyContent: 'stretch', 
        gap: 2,
      }}>
        {work.links.map((link, index) => (
          <Button
            key={index}
            color="neutral"
            component="a"
            href={link.url}
            target="_blank"
            rel="noopener noreferrer"
            variant="outlined"
            startDecorator={<OpenInNew />}
            sx={{ flexGrow: 1 }}
          >
            {link.name}
          </Button>
        ))}
      </CardActions>

      <CardContent>
        <Typography level="body-lg">
          {work.subtitle}
        </Typography>
        <Typography level="h2">
          {work.title}
        </Typography>
        <Typography level="body-sm">
          {work.date}
        </Typography>
        <Typography sx={{ mb: 2 }}>
          {work.description}
        </Typography>

        <Typography level="title-md" sx={{ mb: 1 }}>
          Tags:
        </Typography>
        <Stack direction="row" spacing={1} sx={{ mb: 2 }} flexWrap="wrap">
          {work.tags.map((tag) => (
            <Chip key={tag} size="sm" variant="soft">
              {tag}
            </Chip>
          ))}
        </Stack>

        <Typography level="title-md" sx={{ mb: 1 }}>
          Software Used:
        </Typography>
        <Stack direction="row" spacing={1} sx={{ mb: 2 }}>
          {work.software.map((sw) => (
            <img
              key={sw}
              src={`/icons/${sw}.svg`}
              alt={sw}
              style={{ width: '24px', height: '24px' }}
            />
          ))}
        </Stack>
      </CardContent>
    </Box>
  );
};

export default WorkDetails;
</file>
